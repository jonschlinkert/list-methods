#!/usr/bin/env node

const path     = require('path');
const relative = require('relative');
const file     = require('fs-utils');
const log      = require('verbalize');
const argv     = require('minimist')(process.argv.slice(2));

const methods    = require('../');
const templates  = require('../lib/template');


/**
 * Set the runner with verbalize
 */

log.runner = 'methods';


/**
 * Args
 */

// `methods` => process.argv[1]
var src  = argv._[0] || argv.s || argv.src,      // => process.argv[2]
    dest = argv._[1] || argv.d || argv.dest,     // => process.argv[3]
    tmpl = argv._[2] || argv.t || argv.template; // => process.argv[4]

/**
 * Start
 */

log.writeln();


/**
 * Rewrite paths to be relative to CWD.
 *
 * @param {String} the filepath
 * @return {String} the relative path
 * @api private
 */

function local(filepath) {
  return relative(process.cwd(), filepath);
}

/**
 * Write a file with the list of methods found on the
 * specified object.
 *
 * @param   {String}  src       The file to read for methods.
 * @param   {String}  dest      The destination file.
 * @param   {String}  template  The template to use for the list.
 *
 * @return {String}
 * @api public
 */

function writeMethods(src, dest, template) {
  log.run('reading', src);

  // Write the file
  methods.writeFile(dest, src, {template: template.content});

  // Log a success message.
  log.writeln();
  log.success('  methods [done]');
}


/**
 * Defaults
 */

// If a template is given
if (tmpl) {
  if (tmpl in templates) {
    tmpl = {
      name: tmpl,
      content: templates[tmpl]
    };
    log.run('loading', 'built-in template:', tmpl.name);
  } else {
    try {
      log.run('loading', 'node_modules template:',  tmpl);
      tmpl = require(tmpl);
    } catch(err) {
      try {
        log.run('loading', 'local template:',  tmpl);
        tmpl = require(path.resolve(tmpl));
      } catch(err) {
        log.error('Could not load tempalte', tmpl, err);
      }
    }
  }
} else {
  tmpl = {
    name: 'docs',
    content: templates.docs
  };
  log.run('loading', 'built-in template', tmpl.name);
}


// If a dest is given
if (dest) {
  if (path.extname(dest) === '.yml') {
    tmpl = tmpl || {
      name: 'yaml',
      content: templates.yaml
    };
  }
}


src  = src  || file.findFile('index.js') || file.findFile('*.js');
dest = dest || local(file.name(src) + '.md');



/**
 * End
 */

writeMethods(src, dest, tmpl);